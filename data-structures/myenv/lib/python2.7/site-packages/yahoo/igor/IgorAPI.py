#The DnsDB class/object which sets up API calls

import getpass
import urllib2
import warnings
import yahoo.backyard

#try using the more efficient cElementTree if it is available
try:
	from xml.etree.cElementTree import ElementTree
except ImportError:
	from xml.etree.ElementTree import ElementTree

from methods import Methods

class IgorAPI(object):
	
	def __init__(self, debug=0, api_url="http://igor.corp.yahoo.com:4080/igor/api/", user=None, pw=None, no_crumb=0):
		"""Constructs an opsDB object"""
		#set the base_url to use for API calls
		self.base_url = api_url
		
		#set debug
		self.debug = debug
		
		# get username and password
		if user and pw:
			self._usr_id = user
			self._pswrd = pw
		else:
			#prompt for password
			self._set_user_login_info()
		
		# log in to Bouncer
		# for headless users, ignore 403 error from following redirect to /admin/
		try:
			self._authenticate()
		except urllib2.HTTPError as e:
			if e.getcode() == 403:
				if self.debug:
					print "Ignoring 403 Error during authentication"
			else:
				raise
		
		if no_crumb:
			self.crumb = None
		else:
			self._get_crumb()
		if self.debug and not no_crumb:
			print "crumb: " + self.crumb
		
		# Defining the methods	
		self.meth = Methods(self.base_url, self.crumb, self.debug)
		self.getBranchInfo = self.meth.getBranchInfo
		self.getHosts = self.meth.getHosts
		self.getRoles = self.meth.getRoles
		self.getTags = self.meth.getTags
		self.getBranches = self.meth.getBranches
		self.status = self.meth.status
		self.getHostState = self.meth.getHostState
		self.expandRange = self.meth.expandRange
		self.getBranchLog = self.meth.getBranchLog
		self.getHostInfo = self.meth.getHostInfo
		self.getHostLog = self.meth.getHostLog
		self.getHostRoles = self.meth.getHostRoles
		self.getBranchPermission = self.meth.getBranchPermission
		self.getPropertyPermission = self.meth.getPropertyPermission
		self.getRoleBase = self.meth.getRoleBase
		self.getRoleDependents = self.meth.getRoleDependents
		self.getRoleInfo = self.meth.getRoleInfo
		self.getRoleMembers = self.meth.getRoleMembers
		self.getRolePermission = self.meth.getRolePermission
		self.getRoleRules = self.meth.getRoleRules
		self.getRoleRulesLog = self.meth.getRoleRulesLog
		self.getTagLog = self.meth.getTagLog
		self.getTagPermission = self.meth.getTagPermission
		self.getYinstState = self.meth.getYinstState
		# End of read methods, start of write methods
		self.changeTagStyle = self.meth.changeTagStyle
		self.cloneTag = self.meth.cloneTag
		self.copyBranchToBranch = self.meth.copyBranchToBranch
		self.copyBranchToTag = self.meth.copyBranchToTag
		self.copyTagToBranch = self.meth.copyTagToBranch
		self.copyTagToTag = self.meth.copyTagToTag
		self.delBranch = self.meth.delBranch
		self.delRole = self.meth.delRole
		self.delTag = self.meth.delTag
		self.newBranch = self.meth.newBranch
		self.newRole = self.meth.newRole
		self.newTag = self.meth.newTag
		self.purgeRole = self.meth.purgeRole
		self.setHostTag = self.meth.setHostTag
		self.setPermission = self.meth.setPermission
		self.setRoleMembers = self.meth.setRoleMembers
		self.setRoleRules = self.meth.setRoleRules
		self.tagRoleRules = self.meth.tagRoleRules
		self.tagRoleRulesBatch = self.meth.tagRoleRulesBatch
		self.unbranchRoleRules = self.meth.unbranchRoleRules
		self.untagRoleRules = self.meth.untagRoleRules
		self.branchRoleRules = self.meth.branchRoleRules
		
	def _set_user_login_info(self):
		"""Asks user for PW to use for Bouncer authentication"""
		self._usr_id = getpass.getuser()
		# prompt user for pw and don't echo it as user is typing
		self._pswrd = getpass.getpass(prompt="".join(["Enter Bouncer Password for (",self._usr_id,"): "]))
		
	def _authenticate(self):
		"""Patches urllib2 to use yahoo.backyard's urlopen and passes user credentials to yahoo.backyard"""
		with warnings.catch_warnings():
			warnings.simplefilter("ignore")
			yahoo.backyard.installSSO(user=self._usr_id, password=self._pswrd)
	
	def _get_crumb(self):
		"""Gets crumb by making the appropriate API call"""
		response = urllib2.urlopen("".join([self.base_url,"getCrumb"]) )
		tree = ElementTree()
		tree.parse(response)
		for elem in tree.getroot().findall("crumb"):
			self.crumb = elem.text
