from urllib import urlencode
from urllib2 import urlopen, Request, HTTPError
from HTTPException import HTTPException
from Obj import Obj
#try using the more efficient cElementTree if it is available
try:
	from xml.etree.cElementTree import ElementTree
except ImportError:
	from xml.etree.ElementTree import ElementTree

def _GET(base_url, method, debug, **args):
	"""Make GET request using supplied parameters and return the response, unless an error occurs"""
	encoded_args = urlencode(args, doseq=True)
	if debug:
		print "".join(["-"*5,method," - Encoded arguments:\n", encoded_args])
	reqURL = "".join([base_url,method,"?",encoded_args])
	try:
		#make the request and return response
		response = urlopen(url=reqURL)
		return response
	except HTTPError as exc:
		#tell user the details of the error
		raise HTTPException(exc)

def _POST(base_url, method, acceptable_params, debug, **args):
	"""Make POST request using supplied parameters and return the response, unless an error occurs"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")
	
	encoded_args = urlencode(args, doseq=True)
	reqURL = "".join([base_url,method,"?",encoded_args])
	if debug:
		print "".join(["-"*5,method," - Encoded arguments:\n", encoded_args])
		print "".join(["-"*5,method," - Full URL:\n", reqURL])

	try:
		#make the request and return response
		request = Request(reqURL)
		request.get_method = lambda: 'POST'
		response = urlopen(request)
		return _parse_POST_response(response)
	except HTTPError as exc:
		#tell user the details of the error
		raise HTTPException(exc)

def _get_obj_list(base_url, method, tag, acceptable_params, debug, **args):
	"""Makes the request and parses the response into a list of Objs for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url,method,debug,**args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	lst = []

	for elem in tree.iter():
		if elem.tag == tag:
			lst.append(Obj(elem.attrib))

	return lst

def _get_list(base_url, method, tag, acceptable_params, debug, **args):
	"""Makes the request and parses the response into a list for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")
		
	response = _GET(base_url,method,debug,**args)

	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	lst = []

	for elem in tree.iter():
		if elem.tag == tag:
			lst.append(elem.attrib["name"])

	return lst

def _get_single(base_url, method, tag, acceptable_params, debug, **args):
	"""Makes the request and parses the response into a single Obj for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url,method,debug,**args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	for elem in tree.iter():
		if elem.tag == tag:
			return Obj(elem.attrib)
		
def _parse_POST_response(response):
	"""Get the needed information from the POST response XML and return it"""
	try:
		tree = ElementTree()
		tree.parse(response)
	
		for elem in tree.iter():
			if elem.tag == "repository":
				return elem.attrib["revision"]
				break
	except:
		raise ValueError("POST request completed, but error occured when parsing the response.")

def _getTagInfo(base_url, method, acceptable_params, debug, **args):
	"""Find and return tag information"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	role_dic = {}
	members = []
	rules = []

	for elem in tree.iter():
		if elem.tag == "role":
			role_dic.update(elem.attrib)
		if elem.tag == "host":
			members.append( elem.attrib["name"] )
		if elem.tag == "rule":
			rules.append( elem.text )

	role_dic["members"] = members
	role_dic["rules"] = rules
	return Obj(role_dic)

def _getRoleRulesLog(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url,method,debug,**args)

	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	log_lst = []
	rev_dic = {}

	for elem in tree.iter():
		if elem.tag == "revision":
			rev_dic.update(elem.attrib)
			rev_dic["message"] = elem.text
			log_lst.append( Obj(rev_dic) )
			rev_dic = {}

	return log_lst
		
def _getRoleRules(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url,method,debug,**args)
	
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	lst = []

	for elem in tree.iter():
		if elem.tag == "rule":
			if elem.text:
				lst.append(elem.text)

	return lst
		
def _getRoleInfo(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	role_dic = {}
	members = []
	rules = []

	for elem in tree.iter():
		if elem.tag == "role":
			role_dic.update(elem.attrib)
		if elem.tag == "host":
			members.append( elem.attrib["name"] )
		if elem.tag == "rule":
			rules.append( elem.text )

	role_dic["members"] = members
	role_dic["rules"] = rules
	return Obj(role_dic)

def _getPropertyPermission(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	acl_lst = []
	acl_dic = {}

	for elem in tree.iter():
		if elem.tag == "acl":
			if acl_dic:
				acl_lst.append( Obj(acl_dic) )
				acl_dic = {}
				
			acl_dic.update(elem.attrib)
		if elem.tag == "group":
			acl_dic[elem.text] = elem.attrib["perm"]
	
	if acl_dic:
		acl_lst.append( Obj(acl_dic) )
	return acl_lst
		
def _getHostInfo(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")
	
	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	host_dic = {}

	for elem in tree.iter():
		if elem.tag == "host":
			host_dic.update(elem.attrib)
		if elem.tag == "property":
			if elem.attrib["name"] == "igor_tag":
				host_dic.update( {"igor_tag" : elem.text} )
			
	return Obj(host_dic)
	
def _getBranchPermission(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	branch_dic = {}

	for elem in tree.iter():
		if elem.tag == "acl":
			branch_dic.update(elem.attrib)
		if elem.tag == "group":
			branch_dic[elem.text] = elem.attrib["perm"]

	return Obj(branch_dic)
	
def _getHostState(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")
	
	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	pkg_list = []
	host_dic = {}
	#pkg_dic = {}
	set_dic = {}

	for elem in tree.iter():
		if elem.tag == "state":
			host_dic.update(elem.attrib)
		if elem.tag == "package":
			set_dic = {}
			pkg_list.append(elem.attrib)
		if elem.tag == "setting":
			set_dic.update({ elem.attrib.values()[0] : elem.text })
			pkg_list[-1]["setting"] = set_dic


	host_dic["packages"] = pkg_list		
	return Obj(host_dic)

def _getBranchInfo(base_url, method, acceptable_params, debug, **args):
	"""Makes the request and parses the response for its wrapper method"""
	#check if acceptable criteria was entered (prevents some errors)
	if not _correct_params(acceptable_params,**args):
		raise ValueError("At least one parameter with incorrect name given. Check http://devel.yahoo.com/igor/guide/rest_api.html for acceptable parameters")

	response = _GET(base_url, method, debug, **args)
	# parse the XML response
	tree = ElementTree()
	tree.parse(response)

	obj_list = []
	obj_dic = {}

	for elem in tree.iter():
		#print elem.tag, elem.attrib
		if elem.tag == "role":
			obj_dic.update(elem.attrib)
		if elem.tag == "rules":
			obj_dic.update(elem.attrib)
			obj_list.append(Obj(obj_dic))
			obj_dic = {}
			
	return obj_list
	
def _correct_params(acceptable_params,**args):
	"""Check if user-entered parameter names are accepted by API. If not, return False"""
	for k in args.iterkeys():
		if k not in acceptable_params:
			return False
			
	return True