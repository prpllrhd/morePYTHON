# vim: tabstop=4 shiftwidth=4 softtabstop=4

#    Copyright (C) 2014 Yahoo! Inc. All Rights Reserved.

import os
import pickle

import keyring
import six

from yahoo.backyard import BACKYARD_SSO_URI
from yahoo.backyard import exceptions as exc
from yahoo.backyard import PUB_KEY_FN
from yahoo.backyard import utils as bouncer_utils


# See: http://twiki.corp.yahoo.com/view/SSO/WebHome
DEFAULT_BOUNCER_URL = BACKYARD_SSO_URI
DEFAULT_BOUNCER_TIMEOUT = 10


def env(*vars, **kwargs):
    """Search for the first defined of possibly many env vars

    Returns the first environment variable defined in vars, or
    returns the default defined in kwargs.

    """
    for v in vars:
        value = os.environ.get(v)
        if value:
            return value
    return kwargs.get('default', '')


def store_yby_cookie_in_keyring(keyring_key, cookie):
    try:
        keyring.set_keyring(keyring.backends.file.PlaintextKeyring())
    except (TypeError, AttributeError):
        pass
    keyring.set_password("bouncer_auth",
                         keyring_key,
                         pickle.dumps(cookie))


def get_validate_yby_cookie_from_keyring(keyring_key):
    try:
        keyring.set_keyring(keyring.backends.file.PlaintextKeyring())
    except (TypeError, AttributeError):
        pass
    by_ck = keyring.get_password("bouncer_auth",
                                 keyring_key)
    if not by_ck:
        return None
    by_ck = six.binary_type(by_ck)
    cookie = pickle.loads(by_ck)

    try:
        cookie.validate()
    except exc.BYExpiredException:
        return None
    except exc.BYException as e:
        # Any other exception will be reraised
        raise e
    return cookie


def get_validate_yby_cookie_from_bouncer(username, password, by_url=None,
                                         by_timeout=None, debug=False,
                                         key_filename=PUB_KEY_FN):
    if not password:
        raise exc.AuthorizationFailure("Bouncer password required")
    if not by_url:
        by_url = env("BOUNCER_URL", default=DEFAULT_BOUNCER_URL)
    if by_timeout is None:
        by_timeout = env("BOUNCER_TIMEOUT", default=DEFAULT_BOUNCER_TIMEOUT)
    try:
        by_timeout = float(by_timeout)
    except (TypeError, ValueError):
        by_timeout = DEFAULT_BOUNCER_TIMEOUT
    try:
        by_ck = bouncer_utils.fetch_cookie(username, password, by_url,
                                           by_timeout, debug, key_filename)
        # Do basic validation to ensure that we got something
        # mostly right back...
        by_ck.validate()
    except exc.BYMissingException:
        raise exc.AuthorizationFailure("Invalid bouncer credentials.")
    except exc.BYException as e:
        raise exc.AuthorizationFailure("Bouncer authentication failure: %s"
                                       % (e))
    return by_ck


def build_keyring_key(args):
    """Create a unique key for keyring.

    Used to store and retrieve auth_ref from keyring.

    Returns a slash-separated string of values ordered by key name.

    """

    return '/'.join([args[k] or '?' for k in sorted(args.keys())])
