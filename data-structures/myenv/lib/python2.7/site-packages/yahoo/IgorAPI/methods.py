from functions import _GET, _POST, _get_list, _get_single, _getBranchInfo, _getHostState, _get_obj_list, _getHostInfo, _getBranchPermission, _getPropertyPermission, _getRoleInfo, _getRoleRules, _getRoleRulesLog

class Methods():
		
	def __init__(self, base_url, crumb, debug):
		self.base_url = base_url
		self.crumb = crumb
		self.debug = debug
		
	def getBranchInfo(self, **args):
		"""Find and return list of Role objects for supplied branch"""
		#create list of criteria accepted by API
		acceptable_params = ["branch","rev"]

		return _getBranchInfo(self.base_url, "getBranchInfo", acceptable_params, self.debug, **args)
		
	def getHosts(self, **args):
		"""Find and return list of hosts for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["property","rev"]

		return _get_list(self.base_url, "getHosts", "host", acceptable_params, self.debug, **args)
		
	def getRoles(self, **args):
		"""Find and return list of roles for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["property","rev"]

		return _get_list(self.base_url, "getRoles", "role", acceptable_params, self.debug, **args)
		
	def getTags(self, **args):
		"""Find and return list of tags for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["property"]

		return _get_list(self.base_url, "getTags", "tag", acceptable_params, self.debug, **args)
		
	def getBranches(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["property", "rev"]

		return _get_list(self.base_url, "getBranches", "branch", acceptable_params, self.debug, **args)
		
	def status(self, **args):
		"""Returns a status object representing the Igor status"""
		#create list of criteria accepted by API
		acceptable_params = ["rev"]

		return _get_single(self.base_url, "status", "status", acceptable_params, self.debug, **args)
		
	def getHostState(self, **args):
		"""Returns a host state object for given host"""
		#create list of criteria accepted by API
		acceptable_params = ["host","rev","tag","role","yinst"]

		return _getHostState(self.base_url, "getHostState", acceptable_params, self.debug, **args)
		
	def expandRange(self, **args):
		"""Returns a list of hosts that match the range expression"""
		#create list of criteria accepted by API
		acceptable_params = ["range", "rev"]

		return _get_list(self.base_url, "expandRange", "member", acceptable_params, self.debug, **args)
		
	def getBranchLog(self, **args):
		"""Returns list of branch history events objects for given branch"""
		#create list of criteria accepted by API
		acceptable_params = ["branch", "rev"]

		return _get_obj_list(self.base_url, "getBranchLog", "revision", acceptable_params, self.debug, **args)
		
	def getHostInfo(self, **args):
		"""Returns object containing info for specified host"""
		#create list of criteria accepted by API
		acceptable_params = ["host","rev"]

		return _getHostInfo(self.base_url, "getHostInfo", acceptable_params, self.debug, **args)
		
	def getHostLog(self, **args):
		"""Returns a list of of the specified host's igor restore objects"""
		#create list of criteria accepted by API
		acceptable_params = ["host", "rev"]

		return _get_obj_list(self.base_url, "getHostLog", "install", acceptable_params, self.debug, **args)
		
	def getHostRoles(self, **args):
		"""Returns a list of roles that belong to the specified host"""
		#create list of criteria accepted by API
		acceptable_params = ["host", "rev", "tag"]

		return _get_list(self.base_url, "getHostRoles", "role", acceptable_params, self.debug, **args)
		
	def getBranchPermission(self, **args):
		"""Returns an object representing the branch's acl element"""
		#create list of criteria accepted by API
		acceptable_params = ["branch", "rev"]

		return _getBranchPermission(self.base_url, "getBranchPermission", acceptable_params, self.debug, **args)
		
	def getPropertyPermission(self, **args):
		"""Returns a list of acl objects for specified property"""
		#create list of criteria accepted by API
		acceptable_params = ["property", "rev"]

		return _getPropertyPermission(self.base_url, "getPropertyPermission", acceptable_params, self.debug, **args)
		
	def getRoleBase(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev", "tag"]

		return _get_list(self.base_url, "getRoleBase", "role", acceptable_params, self.debug, **args)
		
	def getRoleDependents(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev", "tag"]

		return _get_list(self.base_url, "getRoleDependents", "role", acceptable_params, self.debug, **args)
		
	def getRoleInfo(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev", "tag"]

		return _getRoleInfo(self.base_url, "getRoleInfo", acceptable_params, self.debug, **args)
		
	def getRoleMembers(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "definition", "rev"]	# disable definition??

		return _get_list(self.base_url, "getRoleMembers", "host", acceptable_params, self.debug, **args)
		
	def getRolePermission(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev"]

		return _getBranchPermission(self.base_url, "getRolePermission", acceptable_params, self.debug, **args)
		
	def getRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev", "tag"]

		return _getRoleRules(self.base_url, "getRoleRules", acceptable_params, self.debug, **args)
	
	def getRoleRulesLog(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rev"]

		return _getRoleRulesLog(self.base_url, "getRoleRulesLog", acceptable_params, self.debug, **args)
		
#	def getTagInfo(self, **args):
#		"""Find and return tag info for given tag"""
#		#create list of criteria accepted by API
#		acceptable_params = ["rev", "tag"]
#
#		return _getTagInfo(self.base_url, "getTagInfo", acceptable_params, self.debug, **args)

	def getTagLog(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "rev"]

		return _getRoleRulesLog(self.base_url, "getTagLog", acceptable_params, self.debug, **args)
		
	def getTagPermission(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "rev"]

		return _getBranchPermission(self.base_url, "getTagPermission", acceptable_params, self.debug, **args)

	def getYinstState(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "rev", "host"]

		response = _GET(self.base_url,"getYinstState",self.debug,**args)
		return response.read()
		
# STARTING WRITE METHODS

	def changeTagStyle(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "style", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"changeTagStyle",acceptable_params,self.debug,**args)
		return response
		
	def cloneTag(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "base_tag", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"cloneTag",acceptable_params,self.debug,**args)
		return response
		
	def copyBranchToBranch(self, args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["from", "to", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"copyBranchToBranch",acceptable_params,self.debug,**args)
		return response
		
	def copyBranchToTag(self, args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["from", "to", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"copyBranchToTag",acceptable_params,self.debug,**args)
		return response
		
	def copyTagToBranch(self, args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["from", "to", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"copyTagToBranch",acceptable_params,self.debug,**args)
		return response
		
	def copyTagToTag(self, args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["from", "to", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"copyTagToTag",acceptable_params,self.debug,**args)
		return response
		
	def delBranch(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["branch", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"delBranch",acceptable_params,self.debug,**args)
		return response
		
	def delRole(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"delRole",acceptable_params,self.debug,**args)
		return response
		
	def delTag(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"delTag",acceptable_params,self.debug,**args)
		return response
		
	def newBranch(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["branch", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"newBranch",acceptable_params,self.debug,**args)
		return response
		
	def newRole(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"newRole",acceptable_params,self.debug,**args)
		return response
		
	def newTag(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["tag", "style", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"newTag",acceptable_params,self.debug,**args)
		return response
		
	def purgeRole(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"purgeRole",acceptable_params,self.debug,**args)
		return response
		
	def setHostTag(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["host", "tag", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"setHostTag",acceptable_params,self.debug,**args)
		return response
		
	def setPermission(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["type", "name", "group", "perm", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"setPermission",acceptable_params,self.debug,**args)
		return response
		
	def setRoleMembers(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "member", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"setRoleMembers",acceptable_params,self.debug,**args)
		return response
		
	def setRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "rule", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"setRoleRules",acceptable_params,self.debug,**args)
		return response
		
	def tagRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "tag", "rev", "branch", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"tagRoleRules",acceptable_params,self.debug,**args)
		return response
		
	def tagRoleRulesBatch(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["rr", "tag", "branch", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"tagRoleRulesBatch",acceptable_params,self.debug,**args)
		return response
		
	def unbranchRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "branch", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"unbranchRoleRules",acceptable_params,self.debug,**args)
		return response
		
	def untagRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "tag", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"untagRoleRules",acceptable_params,self.debug,**args)
		return response
		
	def branchRoleRules(self, **args):
		"""Find and return list of branches for given property"""
		#create list of criteria accepted by API
		acceptable_params = ["role", "branch", "rev", "msg", "crumb"]
		args["crumb"] = self.crumb

		response = _POST(self.base_url,"branchRoleRules",acceptable_params,self.debug,**args)
		return response